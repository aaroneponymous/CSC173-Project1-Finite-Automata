        -:    0:Source:/mnt/c/Aaron's Folder/173Projects/Project2/LinkedList.c
        -:    0:Graph:/mnt/c/Aaron's Folder/173Projects/Project2/cmake-build-debug-coverage/CMakeFiles/Project2.dir/LinkedList.c.gcno
        -:    0:Data:/mnt/c/Aaron's Folder/173Projects/Project2/cmake-build-debug-coverage/CMakeFiles/Project2.dir/LinkedList.c.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2: * File: LinkedList.c
        -:    3: * Creator: George Ferguson
        -:    4: * Created: Thu Jun 30 14:47:12 2016
        -:    5: */
        -:    6:
        -:    7:#include <stdio.h>
        -:    8:#include <stdlib.h>
        -:    9:#include "LinkedList.h"
        -:   10:
        -:   11:/**
        -:   12: * Structure for each element of a doubly-linked LinkedList.
        -:   13: */
        -:   14:typedef struct Node* Node;
        -:   15:struct Node {
        -:   16:	void *data;
        -:   17:	Node next;
        -:   18:	Node prev;
        -:   19:};
        -:   20:
        -:   21:/**
        -:   22: * Linked list with first and last (head and tail) pointers.
        -:   23: */
        -:   24:struct LinkedList {
        -:   25:	Node first;
        -:   26:	Node last;
        -:   27:};
        -:   28:
        -:   29:/**
        -:   30: * Allocate, initialize and return a new (empty) LinkedList.
        -:   31: */
function new_LinkedList called 0 returned 0% blocks executed 0%
    #####:   32:LinkedList new_LinkedList() {
    #####:   33:	LinkedList this = (LinkedList)malloc(sizeof(struct LinkedList));
    #####:   34:	this->first = this->last = NULL;
    #####:   35:	return this;
    %%%%%:   35-block  0
        -:   36:}
        -:   37:
function new_Node called 0 returned 0% blocks executed 0%
    #####:   38:static Node new_Node(void *data) {
    #####:   39:	Node this = (Node)malloc(sizeof(struct Node));
    #####:   40:	this->data = data;
    #####:   41:	this->next = this->prev = NULL;
    #####:   42:	return this;
    %%%%%:   42-block  0
        -:   43:}
        -:   44:
        -:   45:/**
        -:   46: * Free the memory used for the given LinkedList.
        -:   47: * If boolean free_data_also is true, also free the data associated with
        -:   48: * each element.
        -:   49: */
function LinkedList_free called 0 returned 0% blocks executed 0%
    #####:   50:void LinkedList_free(LinkedList this, bool free_data_also) {
    #####:   51:	if (this == NULL) {
    %%%%%:   51-block  0
branch  0 never executed
branch  1 never executed
    #####:   52:		return;
    %%%%%:   52-block  0
        -:   53:	}
        -:   54:	// Free the elements
    #####:   55:	Node node = this->first;
    #####:   56:	while (node != NULL) {
    %%%%%:   56-block  0
    %%%%%:   56-block  1
branch  0 never executed
branch  1 never executed
    #####:   57:		Node next = node->next;
    #####:   58:		if (free_data_also && node->data != NULL) {
    %%%%%:   58-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   58-block  1
branch  2 never executed
branch  3 never executed
    #####:   59:			free(node->data);
    %%%%%:   59-block  0
        -:   60:		}
    #####:   61:		free(node);
    #####:   62:		node = next;
    %%%%%:   62-block  0
        -:   63:	}
        -:   64:	// Free the list itself
    #####:   65:	free(this);
    %%%%%:   65-block  0
        -:   66:}
        -:   67:
        -:   68:/**
        -:   69: * Return true if the given LinkedList is empty.
        -:   70: */
function LinkedList_isEmpty called 0 returned 0% blocks executed 0%
    #####:   71:bool LinkedList_isEmpty(const LinkedList this) {
    #####:   72:	return this->first == NULL;
    %%%%%:   72-block  0
        -:   73:}
        -:   74:
        -:   75:/**
        -:   76: * Add the given void* value at the front of the given LinkedList.
        -:   77: */
function LinkedList_add_at_front called 0 returned 0% blocks executed 0%
    #####:   78:void LinkedList_add_at_front(LinkedList this, void *data) {
    #####:   79:	Node node = new_Node(data);
    %%%%%:   79-block  0
call    0 never executed
    #####:   80:	node->next = this->first;
    #####:   81:	if (this->first != NULL) {
branch  0 never executed
branch  1 never executed
    #####:   82:		this->first->prev = node;
    %%%%%:   82-block  0
        -:   83:	}
    #####:   84:	this->first = node;
    #####:   85:	if (this->last == NULL) {
    %%%%%:   85-block  0
branch  0 never executed
branch  1 never executed
    #####:   86:		this->last = node;
    %%%%%:   86-block  0
        -:   87:	}
    #####:   88:}
        -:   89:
        -:   90:/**
        -:   91: * Add the given void* value at the end of the given LinkedList.
        -:   92: */
function LinkedList_add_at_end called 0 returned 0% blocks executed 0%
    #####:   93:void LinkedList_add_at_end(LinkedList this, void *data) {
    #####:   94:	Node node = new_Node(data);
    %%%%%:   94-block  0
call    0 never executed
    #####:   95:	node->prev = this->last;
    #####:   96:	if (this->last != NULL) {
branch  0 never executed
branch  1 never executed
    #####:   97:		this->last->next = node;
    %%%%%:   97-block  0
        -:   98:	}
    #####:   99:	this->last = node;
    #####:  100:	if (this->first == NULL) {
    %%%%%:  100-block  0
branch  0 never executed
branch  1 never executed
    #####:  101:		this->first = node;
    %%%%%:  101-block  0
        -:  102:	}
    #####:  103:}
        -:  104:
        -:  105:/**
        -:  106: * Return true if then given LinkedList contains given void* value.
        -:  107: * Note this doesn't any kind of equals function, just plain ``==''.
        -:  108: */
function LinkedList_contains called 0 returned 0% blocks executed 0%
    #####:  109:bool LinkedList_contains(const LinkedList this, void *data) {
    #####:  110:	for (Node node=this->first; node != NULL; node=node->next) {
    %%%%%:  110-block  0
    %%%%%:  110-block  1
    %%%%%:  110-block  2
branch  0 never executed
branch  1 never executed
    #####:  111:		if (node->data == data) {
    %%%%%:  111-block  0
branch  0 never executed
branch  1 never executed
    #####:  112:			return true;
    %%%%%:  112-block  0
        -:  113:		}
        -:  114:	}
    #####:  115:	return false;
    %%%%%:  115-block  0
        -:  116:}
        -:  117:
        -:  118:/**
        -:  119: * Remove the given void* value from the given LinkedList if it is there.
        -:  120: * This function uses ``=='' to test for the element.
        -:  121: * Note that this does not free the data associated with the element.
        -:  122: */
function LinkedList_remove called 0 returned 0% blocks executed 0%
    #####:  123:void LinkedList_remove(LinkedList this, void *data) {
    #####:  124:	for (Node node=this->first; node != NULL; node=node->next) {
    %%%%%:  124-block  0
    %%%%%:  124-block  1
    %%%%%:  124-block  2
branch  0 never executed
branch  1 never executed
    #####:  125:		if (node->data == data) {
    %%%%%:  125-block  0
branch  0 never executed
branch  1 never executed
    #####:  126:			if (node == this->first) {
    %%%%%:  126-block  0
branch  0 never executed
branch  1 never executed
    #####:  127:				this->first = node->next;
    %%%%%:  127-block  0
        -:  128:			}
    #####:  129:			if (node == this->last) {
    %%%%%:  129-block  0
branch  0 never executed
branch  1 never executed
    #####:  130:				this->last = node->prev;
    %%%%%:  130-block  0
        -:  131:			}
    #####:  132:			if (node->prev != NULL) {
    %%%%%:  132-block  0
branch  0 never executed
branch  1 never executed
    #####:  133:				node->prev->next = node->next;
    %%%%%:  133-block  0
        -:  134:			}
    #####:  135:			if (node->next != NULL) {
    %%%%%:  135-block  0
branch  0 never executed
branch  1 never executed
    #####:  136:				node->next->prev = node->prev;
    %%%%%:  136-block  0
        -:  137:			}
    #####:  138:			free(node);
    #####:  139:			return;
    %%%%%:  139-block  0
        -:  140:		}
        -:  141:	}
        -:  142:}    
        -:  143:
        -:  144:/**
        -:  145: * Return the void* value at the given index in the given LinkedList, or
        -:  146: * NULL if there is no such.
        -:  147: * Note that this means you can't store NULL in a LinkedList. C'est la vie.
        -:  148: */
function LinkedList_elementAt called 0 returned 0% blocks executed 0%
    #####:  149:void* LinkedList_elementAt(LinkedList this, int index) {
    #####:  150:	int i = 0;
    #####:  151:	for (Node node=this->first; node != NULL; node=node->next) {
    %%%%%:  151-block  0
    %%%%%:  151-block  1
branch  0 never executed
branch  1 never executed
    #####:  152:		if (i == index) {
    %%%%%:  152-block  0
branch  0 never executed
branch  1 never executed
    #####:  153:			return node->data;
    %%%%%:  153-block  0
        -:  154:		}
    #####:  155:		i += 1;
    %%%%%:  155-block  0
        -:  156:	}
    #####:  157:	return NULL;
    %%%%%:  157-block  0
        -:  158:}
        -:  159:
        -:  160:/**
        -:  161: * Remove and return the first element from the given LinkedList.
        -:  162: * Returns NULL if the list is empty.
        -:  163: */
function LinkedList_pop called 0 returned 0% blocks executed 0%
    #####:  164:void* LinkedList_pop(LinkedList this) {
    #####:  165:	void *data = LinkedList_elementAt(this, 0);
    %%%%%:  165-block  0
call    0 never executed
    #####:  166:	if (data != NULL) {
branch  0 never executed
branch  1 never executed
    #####:  167:		LinkedList_remove(this, data); // Removes first occurrence
    %%%%%:  167-block  0
call    0 never executed
        -:  168:	}
    #####:  169:	return data;
    %%%%%:  169-block  0
        -:  170:}
        -:  171:
        -:  172:/**
        -:  173: * Call the given function on each element of given LinkedList, passing the
        -:  174: * void* value to the function.
        -:  175: */
function LinkedList_iterate called 0 returned 0% blocks executed 0%
    #####:  176:void LinkedList_iterate(const LinkedList this, void (*func)(void *)) {
    #####:  177:	for (Node node=this->first; node != NULL; node=node->next) {
    %%%%%:  177-block  0
    %%%%%:  177-block  1
branch  0 never executed
branch  1 never executed
    #####:  178:		func(node->data);
    %%%%%:  178-block  0
call    0 never executed
        -:  179:	}
    #####:  180:}
        -:  181:
        -:  182:/**
        -:  183: * A LinkedListIterator is simply a pointer to a node. It is initialized
        -:  184: * to this->first and increments following next pointers until NULL.
        -:  185: */
        -:  186:struct LinkedListIterator {
        -:  187:	Node next;
        -:  188:};
        -:  189:
        -:  190:/**
        -:  191: * Return an LinkedListIterator for the given LinkedList.
        -:  192: * Don't forget to free() this when you're done iterating.
        -:  193: */
function LinkedList_iterator called 0 returned 0% blocks executed 0%
    #####:  194:LinkedListIterator LinkedList_iterator(const LinkedList this) {
    #####:  195:	LinkedListIterator iterator = (LinkedListIterator)malloc(sizeof(struct LinkedListIterator));
    #####:  196:	iterator->next = this->first;
    #####:  197:	return iterator;
    %%%%%:  197-block  0
        -:  198:}
        -:  199:
        -:  200:/**
        -:  201: * Return true if the given LinkedListIterator will return another element
        -:  202: * if LinkedListIterator_next() is called.
        -:  203: */
function LinkedListIterator_hasNext called 0 returned 0% blocks executed 0%
    #####:  204:bool LinkedListIterator_hasNext(const LinkedListIterator this) {
    #####:  205:	return this->next != NULL;
    %%%%%:  205-block  0
        -:  206:}
        -:  207:
        -:  208:/**
        -:  209: * Return the next value from the given LinkedListIterator and increment it
        -:  210: * to point to the next element.
        -:  211: * Will return NULL if there is no such element.
        -:  212: * This means that you can't store NULL in a LinkedList. C'est la vie.
        -:  213: * It would be easy to allow it and signal `no such element' some other way...
        -:  214: */
function LinkedListIterator_next called 0 returned 0% blocks executed 0%
    #####:  215:void* LinkedListIterator_next(LinkedListIterator this) {
    #####:  216:	if (this->next == NULL) {
    %%%%%:  216-block  0
branch  0 never executed
branch  1 never executed
    #####:  217:		return NULL;
    %%%%%:  217-block  0
        -:  218:	} else {
    #####:  219:		void *data = this->next->data;
    #####:  220:		this->next = this->next->next;
    #####:  221:		return data;
    %%%%%:  221-block  0
        -:  222:	}
        -:  223:}
        -:  224:
        -:  225:#ifdef MAIN
        -:  226:
        -:  227:/**
        -:  228: * Print the given LinkedList to stdout, assuming that the values are
        -:  229: * all null-terminated strings.
        -:  230: * Also prints a newline (because why not).
        -:  231: */
        -:  232:void LinkedList_print_string_list(LinkedList this) {
        -:  233:	printf("[");
        -:  234:	for (Node node=this->first; node != NULL; node=node->next) {
        -:  235:		printf("%s", (char*)(node->data));
        -:  236:		if (node->next != NULL) {
        -:  237:			printf(" ");
        -:  238:		}
        -:  239:	}
        -:  240:	printf("]\n");
        -:  241:}
        -:  242:
        -:  243:int main(int argc, char **argv) {
        -:  244:	LinkedList list = new_LinkedList();
        -:  245:	printf("new list =");
        -:  246:	LinkedList_print_string_list(list);
        -:  247:
        -:  248:	printf("adding three elements: ");
        -:  249:	LinkedList_add_at_end(list, "foo");
        -:  250:	LinkedList_add_at_end(list, "bar");
        -:  251:	LinkedList_add_at_end(list, "baz");
        -:  252:	LinkedList_print_string_list(list);
        -:  253:	printf("adding Ted at front: ");
        -:  254:	LinkedList_add_at_front(list, "Ted");
        -:  255:	LinkedList_print_string_list(list);
        -:  256:
        -:  257:	printf("iterating over list:\n");
        -:  258:	LinkedListIterator iterator = LinkedList_iterator(list);
        -:  259:	while (LinkedListIterator_hasNext(iterator)) {
        -:  260:		void *data = LinkedListIterator_next(iterator);
        -:  261:		char *str = (char*)data;
        -:  262:		printf("%s\n", str);
        -:  263:	}
        -:  264:	free(iterator);
        -:  265:
        -:  266:	// Test remove in middle
        -:  267:	printf("removing bar from middle: ");
        -:  268:	LinkedList_remove(list, "bar");
        -:  269:	LinkedList_print_string_list(list);
        -:  270:	// Test remove at head
        -:  271:	printf("removing Ted from start: ");
        -:  272:	LinkedList_remove(list, "Ted");
        -:  273:	LinkedList_print_string_list(list);
        -:  274:	// Test remove in end
        -:  275:	printf("removing baz from end: ");
        -:  276:	LinkedList_remove(list, "baz");
        -:  277:	LinkedList_print_string_list(list);
        -:  278:
        -:  279:	// Test remove only element
        -:  280:	void *elt = LinkedList_elementAt(list, 0);
        -:  281:	printf("element 0 is \"%s\"\n", (char*)elt);
        -:  282:	printf("removing only remaining element: ");
        -:  283:	LinkedList_remove(list, elt);
        -:  284:	LinkedList_print_string_list(list);
        -:  285:
        -:  286:	printf("list isEmpty: %d\n", LinkedList_isEmpty(list));
        -:  287:
        -:  288:	printf("freeing list\n");
        -:  289:	LinkedList_free(list, false);
        -:  290:}
        -:  291:
        -:  292:#endif
